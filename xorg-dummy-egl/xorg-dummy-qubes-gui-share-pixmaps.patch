diff -ruNp a/configure.ac b/configure.ac
--- a/configure.ac	2019-12-16 12:37:56.937237824 +0300
+++ b/configure.ac	2019-12-16 12:11:16.168460913 +0300
@@ -60,6 +60,11 @@ XORG_DRIVER_CHECK_EXT(RENDER, renderprot
 PKG_CHECK_MODULES(XORG, [xorg-server >= 1.4.99.901] xproto fontsproto $REQUIRED_MODULES)
 
 # Checks for libraries.
+AC_CHECK_LIB([xengnttab], [xengntshr_open])
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADER([xengnttab.h])
 
 
 DRIVER_NAME=dummy-egl
diff -ruNp a/src/dummy_driver.c b/src/dummy_driver.c
--- a/src/dummy_driver.c	2019-12-16 12:37:56.938237854 +0300
+++ b/src/dummy_driver.c	2019-12-16 12:37:54.009149070 +0300
@@ -114,11 +114,13 @@
 };
 
 typedef enum {
+    OPTION_GUI_DOMID,
     OPTION_SW_CURSOR
 } DUMMYOpts;
 
 static const OptionInfoRec DUMMYOptions[] = {
     { OPTION_SW_CURSOR,	"SWcursor",	OPTV_BOOLEAN,	{0}, FALSE },
+    { OPTION_GUI_DOMID, "GUIDomID",     OPTV_INTEGER,   {0}, FALSE },
     { -1,                  NULL,           OPTV_NONE,	{0}, FALSE }
 };
 
@@ -624,6 +626,7 @@ DUMMYPreInit(ScrnInfoPtr pScrn, int flag
     xf86ProcessOptions(pScrn->scrnIndex, pScrn->options, dPtr->Options);
 
     xf86GetOptValBool(dPtr->Options, OPTION_SW_CURSOR,&dPtr->swCursor);
+    xf86GetOptValInteger(dPtr->Options, OPTION_GUI_DOMID, (int*)&dPtr->gui_domid);
 
     if (device->videoRam != 0) {
 	pScrn->videoRam = device->videoRam;
@@ -767,6 +770,118 @@ DUMMYLoadPalette(
 
 static ScrnInfoPtr DUMMYScrn; /* static-globalize it */
 
+static struct xf86_qubes_pixmap *
+qubes_alloc_pixmap_private(size_t size) {
+    DUMMYPtr dPtr = DUMMYPTR(DUMMYScrn);
+    struct xf86_qubes_pixmap *priv;
+    size_t pages;
+
+    pages = (size + XC_PAGE_SIZE - 1) >> XC_PAGE_SHIFT;
+
+    priv = calloc(1, sizeof(struct xf86_qubes_pixmap) + pages * sizeof(uint32_t));
+    if (priv == NULL)
+        return NULL;
+
+    priv->pages = pages;
+    priv->refs = (uint32_t *) (((uint8_t *) priv) + sizeof(struct xf86_qubes_pixmap));
+
+    priv->data = xengntshr_share_pages(dPtr->xgs,
+                                       dPtr->gui_domid,
+                                       pages,
+                                       priv->refs,
+                                       0);
+    if (priv->data == NULL) {
+        xf86DrvMsg(DUMMYScrn->scrnIndex, X_ERROR,
+                   "Failed to allocate %zu grant pages!\n", pages);
+        free(priv);
+        return NULL;
+    }
+
+    return priv;
+}
+
+static PixmapPtr
+qubes_create_pixmap(ScreenPtr pScreen, int width, int height, int depth,
+                    unsigned hint)
+{
+    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
+    DUMMYPtr dPtr = DUMMYPTR(pScrn);
+    PixmapPtr pixmap;
+    struct xf86_qubes_pixmap *priv;
+    size_t bytes_per_line;
+    size_t size;
+
+    if (width == 0 || height == 0 || depth == 0)
+        return fbCreatePixmap(pScreen, width, height, depth, hint);
+
+    pixmap = fbCreatePixmap(pScreen, 0, 0, depth, hint);
+    if (pixmap == NULL)
+        return NULL;
+
+    bytes_per_line = PixmapBytePad(width, depth);
+    size = bytes_per_line * height;
+
+    priv = qubes_alloc_pixmap_private(size);
+    if (priv == NULL)
+        goto err_destroy_pixmap;
+    xf86_qubes_pixmap_set_private(pixmap, priv);
+
+    if (!pScreen->ModifyPixmapHeader(pixmap,
+                                    width,
+                                    height,
+                                    depth,
+                                    BitsPerPixel(depth),
+                                    bytes_per_line,
+                                    priv->data))
+        goto err_unshare;
+
+    return pixmap;
+
+err_unshare:
+    xengntshr_unshare(dPtr->xgs, priv->data, priv->pages);
+    // Also frees refs
+    free(priv);
+err_destroy_pixmap:
+    fbDestroyPixmap(pixmap);
+
+    return NULL;
+}
+
+static Bool
+qubes_create_screen_resources(ScreenPtr pScreen) {
+    ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
+    DUMMYPtr dPtr = DUMMYPTR(pScrn);
+
+    Bool ret = dPtr->CreateScreenResources(pScreen);
+
+    if (ret) {
+        xf86_qubes_pixmap_set_private(pScreen->GetScreenPixmap(pScreen),
+                                      dPtr->FBBasePriv);
+    }
+
+    return ret;
+}
+
+static void qubes_free_pixmap_private(DUMMYPtr dPtr,
+                                      struct xf86_qubes_pixmap *priv) {
+    xengntshr_unshare(dPtr->xgs, priv->data, priv->pages);
+    // Also frees refs
+    free(priv);
+}
+
+Bool
+qubes_destroy_pixmap(PixmapPtr pixmap) {
+    DUMMYPtr dPtr = DUMMYPTR(DUMMYScrn);
+    struct xf86_qubes_pixmap *priv;
+
+    priv = xf86_qubes_pixmap_get_private(pixmap);
+    if (priv != NULL && pixmap->refcnt == 1) {
+        qubes_free_pixmap_private(dPtr, priv);
+    }
+
+    return fbDestroyPixmap(pixmap);
+}
+
 /* Mandatory */
 static Bool
 DUMMYScreenInit(SCREEN_INIT_ARGS_DECL)
@@ -777,6 +892,9 @@ DUMMYScreenInit(SCREEN_INIT_ARGS_DECL)
     VisualPtr visual;
     void *pixels;
 
+    if (!xf86_qubes_pixmap_register_private())
+        return FALSE;
+
     /*
      * we need to get the ScrnInfoRec for this screen, so let's allocate
      * one first thing
@@ -785,9 +903,15 @@ DUMMYScreenInit(SCREEN_INIT_ARGS_DECL)
     dPtr = DUMMYPTR(pScrn);
     DUMMYScrn = pScrn;
 
-
-    if (!(pixels = malloc(pScrn->videoRam * 1024)))
-	return FALSE;
+    dPtr->xgs = xengntshr_open(NULL, 0);
+    if (dPtr->xgs == NULL) {
+        xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Failed to open xengntshr!\n");
+        return FALSE;
+    }
+    dPtr->FBBasePriv = qubes_alloc_pixmap_private(pScrn->videoRam * 1024);
+    if (dPtr->FBBasePriv == NULL)
+        return FALSE;
+    pixels = (void *) dPtr->FBBasePriv->data;
 
     /*
      * Reset visual list.
@@ -828,6 +952,11 @@ DUMMYScreenInit(SCREEN_INIT_ARGS_DECL)
 	    }
 	}
     }
+
+    pScreen->CreatePixmap = qubes_create_pixmap;
+    pScreen->DestroyPixmap = qubes_destroy_pixmap;
+    dPtr->CreateScreenResources = pScreen->CreateScreenResources;
+    pScreen->CreateScreenResources = qubes_create_screen_resources;
     
     /* must be after RGB ordering fixed */
     fbPictureInit(pScreen, 0, 0);
@@ -970,6 +1099,11 @@ DUMMYCloseScreen(CLOSE_SCREEN_ARGS_DECL)
     ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
     DUMMYPtr dPtr = DUMMYPTR(pScrn);
 
+    if (dPtr->FBBasePriv) {
+        qubes_free_pixmap_private(dPtr, dPtr->FBBasePriv);
+        dPtr->FBBasePriv = NULL;
+    }
+
     free(pScreen->GetScreenPixmap(pScreen)->devPrivate.ptr);
 
     if (dPtr->CursorInfo)
diff -ruNp a/src/dummy.h b/src/dummy.h
--- a/src/dummy.h	2019-12-16 12:37:56.934237733 +0300
+++ b/src/dummy.h	2019-12-16 12:12:39.456929010 +0300
@@ -13,6 +13,9 @@
 
 #include "compat-api.h"
 
+#include <xengnttab.h>
+#include "include/xf86-qubes-common.h"
+
 #define DUMMY_MAX_SCREENS 16
 
 /* Supported chipsets */
@@ -53,6 +56,10 @@ typedef struct dummyRec
     /* proc pointer */
     CloseScreenProcPtr CloseScreen;
     xf86CursorInfoPtr CursorInfo;
+    CreateScreenResourcesProcPtr CreateScreenResources;
+    struct xf86_qubes_pixmap *FBBasePriv;
+    xengntshr_handle *xgs;
+    uint32_t gui_domid;
 
     Bool DummyHWCursorShown;
     int cursorX, cursorY;
diff -ru a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2019-12-16 14:18:45.381166316 +0300
+++ b/src/Makefile.am	2019-12-16 14:21:19.079837244 +0300
@@ -36,4 +36,5 @@
          compat-api.h \
          dummy_cursor.c \
          dummy_driver.c \
+	 xf86-qubes-common.c \
          dummy.h
