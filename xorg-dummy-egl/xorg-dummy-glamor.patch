diff -ruNp a/src/dummy_driver.c b/src/dummy_driver.c
--- a/src/dummy_driver.c	2019-12-30 15:53:25.871352182 +0300
+++ b/src/dummy_driver.c	2019-12-30 15:53:19.316143743 +0300
@@ -48,6 +48,13 @@ Atom width_mm_atom = 0;
 Atom height_mm_atom = 0;
 #define HEIGHT_MM_NAME "HEIGHT_MM"
 
+/* glamor support */
+#define GLAMOR_FOR_XORG
+#include <glamor.h>
+#include <gbm.h>
+#include <unistd.h>
+#include <fcntl.h>
+
 /* Mandatory functions */
 static const OptionInfoRec *	DUMMYAvailableOptions(int chipid, int busid);
 static void     DUMMYIdentify(int flags);
@@ -115,11 +122,13 @@ static SymTabRec DUMMYChipsets[] = {
 
 typedef enum {
     OPTION_GUI_DOMID,
+    OPTION_RENDER,
     OPTION_SW_CURSOR
 } DUMMYOpts;
 
 static const OptionInfoRec DUMMYOptions[] = {
     { OPTION_SW_CURSOR,	"SWcursor",	OPTV_BOOLEAN,	{0}, FALSE },
+    { OPTION_RENDER,   "Render",       OPTV_STRING,    {0}, FALSE },
     { OPTION_GUI_DOMID, "GUIDomID",     OPTV_INTEGER,   {0}, FALSE },
     { -1,                  NULL,           OPTV_NONE,	{0}, FALSE }
 };
@@ -718,6 +727,31 @@ DUMMYPreInit(ScrnInfoPtr pScrn, int flag
     pScrn->memPhysBase = 0;
     pScrn->fbOffset = 0;
 
+    const char *render = xf86GetOptValString(dPtr->Options, OPTION_RENDER);
+    dPtr->glamor = FALSE;
+
+    if (!render)
+       xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Render option is not available\n");
+    else {
+       dPtr->fd = open(render, O_RDWR);
+       if (dPtr->fd < 0)
+           xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Open render %s fail\n", render);
+    }
+
+    if (xf86LoadSubModule(pScrn, GLAMOR_EGL_MODULE_NAME)) {
+       if (glamor_egl_init(pScrn, dPtr->fd)) {
+           xf86DrvMsg(pScrn->scrnIndex, X_INFO, "glamor initialized\n");
+           dPtr->glamor = TRUE;
+       } else
+            xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                       "glamor initialization failed\n");
+    } else
+        xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                   "Failed to load glamor module.\n");
+
+    if (!dPtr->glamor)
+       close(dPtr->fd);
+
     return TRUE;
 }
 #undef RETURN
@@ -855,8 +889,10 @@ qubes_create_screen_resources(ScreenPtr
     Bool ret = dPtr->CreateScreenResources(pScreen);
 
     if (ret) {
-        xf86_qubes_pixmap_set_private(pScreen->GetScreenPixmap(pScreen),
-                                      dPtr->FBBasePriv);
+       PixmapPtr pixmap = pScreen->GetScreenPixmap(pScreen);
+       if (dPtr->glamor)
+           glamor_egl_create_textured_pixmap_from_gbm_bo(pixmap, dPtr->front_bo, FALSE);
+       xf86_qubes_pixmap_set_private(pixmap, dPtr->FBBasePriv);
     }
 
     return ret;
@@ -953,16 +989,42 @@ DUMMYScreenInit(SCREEN_INIT_ARGS_DECL)
 	}
     }
 
-    pScreen->CreatePixmap = qubes_create_pixmap;
-    pScreen->DestroyPixmap = qubes_destroy_pixmap;
-    dPtr->CreateScreenResources = pScreen->CreateScreenResources;
-    pScreen->CreateScreenResources = qubes_create_screen_resources;
-    
     /* must be after RGB ordering fixed */
     fbPictureInit(pScreen, 0, 0);
 
     xf86SetBlackWhitePixels(pScreen);
 
+    if (dPtr->glamor) {
+       uint32_t format;
+       if (pScrn->depth == 30)
+            format = GBM_FORMAT_ARGB2101010;
+        else
+            format = GBM_FORMAT_ARGB8888;
+
+       dPtr->gbm = glamor_egl_get_gbm_device(pScreen);
+       if (!dPtr->gbm)
+            xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                    "Failed to get gbm device.\n");
+       dPtr->front_bo = gbm_bo_create(dPtr->gbm,
+                    pScrn->virtualX, pScrn->virtualY,
+                    format,
+                    GBM_BO_USE_RENDERING | GBM_BO_USE_SCANOUT);
+       if (!dPtr->front_bo)
+            xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                    "Failed to create front buffer.\n");
+
+       if (!glamor_init(pScreen, GLAMOR_USE_EGL_SCREEN)) {
+            xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
+                   "Failed to initialize glamor at ScreenInit() time.\n");
+           dPtr->glamor = FALSE;
+       }
+    }
+
+    pScreen->CreatePixmap = qubes_create_pixmap;
+    pScreen->DestroyPixmap = qubes_destroy_pixmap;
+    dPtr->CreateScreenResources = pScreen->CreateScreenResources;
+    pScreen->CreateScreenResources = qubes_create_screen_resources;
+
     /* initialize XRANDR */
     xf86CrtcConfigInit(pScrn, &DUMMYCrtcConfigFuncs);
     /* FIXME */
@@ -1104,6 +1166,11 @@ DUMMYCloseScreen(CLOSE_SCREEN_ARGS_DECL)
         dPtr->FBBasePriv = NULL;
     }
 
+    if (dPtr->front_bo) {
+        gbm_bo_destroy(dPtr->front_bo);
+        dPtr->front_bo = NULL;
+    }
+
     free(pScreen->GetScreenPixmap(pScreen)->devPrivate.ptr);
 
     if (dPtr->CursorInfo)
diff -ruNp a/src/dummy.h b/src/dummy.h
--- a/src/dummy.h	2019-12-30 15:53:25.871352182 +0300
+++ b/src/dummy.h	2019-12-30 13:04:12.480020033 +0300
@@ -41,6 +41,9 @@ typedef struct _color
     int blue;
 } dummy_colors;
 
+struct gbm_device;
+struct gbm_bo;
+
 typedef struct dummyRec 
 {
     /* XRANDR support begin */
@@ -60,6 +63,11 @@ typedef struct dummyRec
     struct xf86_qubes_pixmap *FBBasePriv;
     xengntshr_handle *xgs;
     uint32_t gui_domid;
+    /* DRI support */
+    int fd;
+    Bool glamor;
+    struct gbm_device *gbm;
+    struct gbm_bo *front_bo;
 
     Bool DummyHWCursorShown;
     int cursorX, cursorY;
diff -ruNp a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2019-12-30 15:53:25.871352182 +0300
+++ b/src/Makefile.am	2019-12-30 15:51:09.643020404 +0300
@@ -25,11 +25,11 @@
 # _ladir passes a dummy rpath to libtool so the thing will actually link
 # TODO: -nostdlib/-Bstatic/-lgcc platform magic, not installing the .a, etc.
 
-AM_CFLAGS = $(XORG_CFLAGS) $(PCIACCESS_CFLAGS)
+AM_CFLAGS = $(XORG_CFLAGS) $(PCIACCESS_CFLAGS) $(GBM_CFLAGS)
 
 dummyegl_drv_la_LTLIBRARIES = dummyegl_drv.la
 dummyegl_drv_la_LDFLAGS = -module -avoid-version
-dummyegl_drv_la_LIBADD = $(XORG_LIBS)
+dummyegl_drv_la_LIBADD = $(XORG_LIBS) $(GBM_LIBS)
 dummyegl_drv_ladir = @moduledir@/drivers
 
 dummyegl_drv_la_SOURCES = \
